generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  user
  admin
}

model User {
  id                 String   @id @default(uuid())
  name               String
  email              String   @unique
  password           String
  shouldSendEmail    Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  role               UserRole @default(user)
  profileImg         String?  @default("/assets/demo-user.png")
  isVerified         Boolean  @default(false)
  isBlocked          Boolean?
  failedLoginAttempt Int?     @default(0)

  Orders                Orders[]
  Currency              Currency?
  CurrencyRequest       CurrencyRequest[]
  VerificationOtp       VerificationOtp[]
  Referral              Referral?               @relation(name: "Referral_OwnBy")
  ReferredByMe          Referral[]              @relation(name: "Referral_By")
  Tickets               Tickets[]
  Review                Review[]
  SmsPoolOrder          SmsPoolOrder[]
  ManualCurrencyRequest ManualCurrencyRequest[]
}

enum EPayWith {
  paystack
  nowpay
  wallet
}

model VerificationOtp {
  id        String           @id @default(uuid())
  type      EVerificationOtp
  otp       Int
  createdAt DateTime         @default(now())
  ownById   String
  ownBy     User             @relation(fields: [ownById], references: [id], onDelete: Cascade)
}

enum EVerificationOtp {
  createUser
  forgotPassword
}

enum EAccountCategory {
  // Social media accounts
  Facebook
  Instagram
  LinkedIn
  Twitter
  Telegram
  Youtube
  TikTok
  Reddit
  Website
  Google
  Likee
  Twitch
  Reviews
  Others
  Snapchat
  Spotify
}

model Orders {
  id              String           @id @unique @default(uuid())
  accountCategory EAccountCategory
  quantity        Float
  charge          Float
  orderById       String
  orderBy         User             @relation(fields: [orderById], references: [id], onDelete: Cascade)
  japServiceId    String
  japOrderId      String
  link            String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  status          EOrderStatus?    @default(completed)
}

enum ESmsPoolOrderStatus {
  pending
  completed
  cancelled
  refunded
}

model SmsPoolOrder {
  id          String              @id @unique @default(uuid())
  serviceId   String
  countryId   String
  orderId     String
  phoneNumber String
  number      String
  pool        String
  cc          String
  orderById   String
  country     String
  service     String
  status      ESmsPoolOrderStatus @default(pending)
  orderBy     User                @relation(fields: [orderById], references: [id], onDelete: Cascade)
  cost        Float
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

enum EOrderStatus {
  pending
  completed
  cancelled
}

model Currency {
  id        String   @id @unique @default(uuid())
  amount    Float    @default(0)
  ownById   String   @unique
  ownBy     User     @relation(fields: [ownById], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CurrencyRequest {
  id            String                   @id @unique @default(uuid())
  message       String
  amount        Float
  ownById       String
  status        EStatusOfCurrencyRequest @default(pending)
  paymentStatus String                   @default("waiting")
  ownBy         User                     @relation(fields: [ownById], references: [id], onDelete: Cascade)
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
}

enum EStatusOfCurrencyRequest {
  pending
  approved
  denied
}

model Referral {
  id      String @id @unique @default(uuid())
  ownById String @unique
  ownBy   User   @relation(name: "Referral_OwnBy", fields: [ownById], references: [id], onDelete: Cascade)

  referralById String
  referralBy   User   @relation(name: "Referral_By", fields: [referralById], references: [id], onDelete: Cascade)

  status EReferralStatus @default(pending)
  amount Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EReferralStatus {
  pending
  completed
  cancel
}

model Tickets {
  id        String   @id @unique @default(uuid())
  ownById   String
  ownBy     User     @relation(fields: [ownById], references: [id], onDelete: Cascade)
  subject   String
  message   String
  status    ETickets @default(open)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ETickets {
  open
  closed
  sloved
}

model Review {
  id        String   @id @unique @default(uuid())
  ownById   String
  ownBy     User     @relation(fields: [ownById], references: [id], onDelete: Cascade)
  title     String
  review    String
  star      Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EStatusOfManualCurrencyRequest {
  pending
  approved
  denied
}

model ManualCurrencyRequest {
  id              String                         @id @unique @default(uuid())
  message         String?
  image           String?
  requestedAmount Float
  receivedAmount  Float?
  ownById         String
  status          EStatusOfManualCurrencyRequest @default(pending)
  accountName     String?
  accountNumber   String?
  bankName        String?
  transactionHash String?
  dollarRate      Float?
  ownBy           User                           @relation(fields: [ownById], references: [id], onDelete: Cascade)
  createdAt       DateTime                       @default(now())
  updatedAt       DateTime                       @updatedAt
  bankId          String?
  bank            Bank?                          @relation(fields: [bankId], references: [id], onDelete: Cascade)
  cryptoBankId    String?
  cryptoBank      CryptoBank?                    @relation(fields: [cryptoBankId], references: [id], onDelete: Cascade)
}

model Bank {
  id                    String                  @id @unique @default(uuid())
  accountNumber         String
  accountName           String
  bankName              String
  isActive              Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  ManualCurrencyRequest ManualCurrencyRequest[]
}

enum ECryptoType {
  USDT
  USDC
  BTC
  SOLANA
}

model CryptoBank {
  id                    String                  @id @unique @default(uuid())
  walletAddress         String
  name                  String
  isActive              Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  ManualCurrencyRequest ManualCurrencyRequest[]
}
